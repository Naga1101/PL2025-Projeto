
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN BOOLEANTYPE CASE CHAR COLON COMMA CONST DIVIDE DO DOT DOWNTO ELSE END EQ FOR FUNCTION GE GT ID IF INTEGERTYPE LE LPAREN LT MINUS NE NOT NUMBER OF OR PLUS PROCEDURE PROGRAM READFUNC READFUNCLN REPEAT RPAREN SEMICOLON STRING STRINGTYPE THEN TIMES TO TYPE UNTIL VAR WHILE WRITEFUNC WRITEFUNCLNinit : PROGRAM program_nameprogram_name : ID SEMICOLON var_decl_or_funcvar_decl_or_func : var_decl begin_func\n| begin_funcvar_decl : VAR var_decl_linesvar_decl_lines : var_decl_line\n| var_decl_lines var_decl_linevar_decl_line : id_list COLON type SEMICOLONid_list : ID\n| id_list COMMA IDtype : INTEGERTYPE\n| BOOLEANTYPE\n| STRINGTYPEbegin_func : compound_statement DOTstatement_list : statement\n| statement_list statementstatement : simple_statement SEMICOLON\n| compound_statement SEMICOLON\n| selection_statement SEMICOLONsimple_statement : ID ASSIGN expression\n| WRITEFUNC LPAREN expression RPAREN\n| WRITEFUNCLN LPAREN expression RPARENselection_statement : IF expression THEN statement\n| IF expression THEN statement ELSE statementcompound_statement : BEGIN statement_list ENDexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expressionexpression : STRING\n| NUMBER\n| CHAR\n| ID'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,3,6,8,12,17,],[0,-1,-2,-4,-3,-14,]),'ID':([2,9,11,13,14,18,19,26,27,29,31,32,33,34,35,36,37,51,52,53,54,55,56,64,],[4,16,23,16,-6,23,-15,42,-7,47,-16,-17,-18,-19,42,42,42,23,42,42,42,42,-8,23,]),'SEMICOLON':([4,20,21,22,30,32,33,34,39,40,41,42,43,44,45,46,48,57,58,59,60,61,62,63,65,],[5,32,33,34,-25,-17,-18,-19,-30,-31,-32,-33,56,-11,-12,-13,-20,-21,-22,-23,-26,-27,-28,-29,-24,]),'VAR':([5,],[9,]),'BEGIN':([5,7,11,13,14,18,19,27,31,32,33,34,51,56,64,],[11,11,11,-5,-6,11,-15,-7,-16,-17,-18,-19,11,-8,11,]),'DOT':([10,30,],[17,-25,]),'WRITEFUNC':([11,18,19,31,32,33,34,51,64,],[24,24,-15,-16,-17,-18,-19,24,24,]),'WRITEFUNCLN':([11,18,19,31,32,33,34,51,64,],[25,25,-15,-16,-17,-18,-19,25,25,]),'IF':([11,18,19,31,32,33,34,51,64,],[26,26,-15,-16,-17,-18,-19,26,26,]),'COLON':([15,16,47,],[28,-9,-10,]),'COMMA':([15,16,47,],[29,-9,-10,]),'END':([18,19,31,32,33,34,],[30,-15,-16,-17,-18,-19,]),'ASSIGN':([23,],[35,]),'LPAREN':([24,25,],[36,37,]),'STRING':([26,35,36,37,52,53,54,55,],[39,39,39,39,39,39,39,39,]),'NUMBER':([26,35,36,37,52,53,54,55,],[40,40,40,40,40,40,40,40,]),'CHAR':([26,35,36,37,52,53,54,55,],[41,41,41,41,41,41,41,41,]),'INTEGERTYPE':([28,],[44,]),'BOOLEANTYPE':([28,],[45,]),'STRINGTYPE':([28,],[46,]),'ELSE':([32,33,34,59,],[-17,-18,-19,64,]),'THEN':([38,39,40,41,42,60,61,62,63,],[51,-30,-31,-32,-33,-26,-27,-28,-29,]),'PLUS':([38,39,40,41,42,48,49,50,60,61,62,63,],[52,-30,-31,-32,-33,52,52,52,52,52,52,52,]),'MINUS':([38,39,40,41,42,48,49,50,60,61,62,63,],[53,-30,-31,-32,-33,53,53,53,53,53,53,53,]),'TIMES':([38,39,40,41,42,48,49,50,60,61,62,63,],[54,-30,-31,-32,-33,54,54,54,54,54,54,54,]),'DIVIDE':([38,39,40,41,42,48,49,50,60,61,62,63,],[55,-30,-31,-32,-33,55,55,55,55,55,55,55,]),'RPAREN':([39,40,41,42,49,50,60,61,62,63,],[-30,-31,-32,-33,57,58,-26,-27,-28,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'program_name':([2,],[3,]),'var_decl_or_func':([5,],[6,]),'var_decl':([5,],[7,]),'begin_func':([5,7,],[8,12,]),'compound_statement':([5,7,11,18,51,64,],[10,10,21,21,21,21,]),'var_decl_lines':([9,],[13,]),'var_decl_line':([9,13,],[14,27,]),'id_list':([9,13,],[15,15,]),'statement_list':([11,],[18,]),'statement':([11,18,51,64,],[19,31,59,65,]),'simple_statement':([11,18,51,64,],[20,20,20,20,]),'selection_statement':([11,18,51,64,],[22,22,22,22,]),'expression':([26,35,36,37,52,53,54,55,],[38,48,49,50,60,61,62,63,]),'type':([28,],[43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> PROGRAM program_name','init',2,'p_init','parser.py',54),
  ('program_name -> ID SEMICOLON var_decl_or_func','program_name',3,'p_program_name','parser.py',58),
  ('var_decl_or_func -> var_decl begin_func','var_decl_or_func',2,'p_var_decl_or_func','parser.py',62),
  ('var_decl_or_func -> begin_func','var_decl_or_func',1,'p_var_decl_or_func','parser.py',63),
  ('var_decl -> VAR var_decl_lines','var_decl',2,'p_var_decl','parser.py',70),
  ('var_decl_lines -> var_decl_line','var_decl_lines',1,'p_var_decl_lines','parser.py',74),
  ('var_decl_lines -> var_decl_lines var_decl_line','var_decl_lines',2,'p_var_decl_lines','parser.py',75),
  ('var_decl_line -> id_list COLON type SEMICOLON','var_decl_line',4,'p_var_decl_line','parser.py',82),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',87),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',88),
  ('type -> INTEGERTYPE','type',1,'p_type','parser.py',95),
  ('type -> BOOLEANTYPE','type',1,'p_type','parser.py',96),
  ('type -> STRINGTYPE','type',1,'p_type','parser.py',97),
  ('begin_func -> compound_statement DOT','begin_func',2,'p_begin_func','parser.py',101),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',107),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',108),
  ('statement -> simple_statement SEMICOLON','statement',2,'p_statement','parser.py',115),
  ('statement -> compound_statement SEMICOLON','statement',2,'p_statement','parser.py',116),
  ('statement -> selection_statement SEMICOLON','statement',2,'p_statement','parser.py',117),
  ('simple_statement -> ID ASSIGN expression','simple_statement',3,'p_simple_statement','parser.py',121),
  ('simple_statement -> WRITEFUNC LPAREN expression RPAREN','simple_statement',4,'p_simple_statement','parser.py',122),
  ('simple_statement -> WRITEFUNCLN LPAREN expression RPAREN','simple_statement',4,'p_simple_statement','parser.py',123),
  ('selection_statement -> IF expression THEN statement','selection_statement',4,'p_selection_statement','parser.py',132),
  ('selection_statement -> IF expression THEN statement ELSE statement','selection_statement',6,'p_selection_statement','parser.py',133),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','parser.py',137),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',141),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',142),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',143),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',144),
  ('expression -> STRING','expression',1,'p_expression_value','parser.py',148),
  ('expression -> NUMBER','expression',1,'p_expression_value','parser.py',149),
  ('expression -> CHAR','expression',1,'p_expression_value','parser.py',150),
  ('expression -> ID','expression',1,'p_expression_value','parser.py',151),
]
