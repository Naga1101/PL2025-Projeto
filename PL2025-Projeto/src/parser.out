Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BREAK
    CASE
    CONST
    EQ
    GE
    LE
    LENGTHFUNC
    LT
    NE
    NOT
    OF
    OR
    PROCEDURE
    READFUNC
    READFUNCLN
    REPEAT
    TYPE
    UNTIL
    WHILE

Grammar

Rule 0     S' -> init
Rule 1     init -> PROGRAM program_name
Rule 2     program_name -> ID SEMICOLON program_body
Rule 3     program_body -> func_decls var_decl begin_progr
Rule 4     program_body -> func_decls begin_progr
Rule 5     program_body -> var_decl begin_progr
Rule 6     program_body -> begin_progr
Rule 7     func_decls -> func_decl
Rule 8     func_decls -> func_decls func_decl
Rule 9     func_decl -> FUNCTION ID LPAREN var_decl_lines RPAREN COLON type SEMICOLON begin_func
Rule 10    begin_func -> var_decl compound_statement SEMICOLON
Rule 11    begin_func -> compound_statement SEMICOLON
Rule 12    var_decl -> VAR var_decl_lines
Rule 13    var_decl_lines -> var_decl_line
Rule 14    var_decl_lines -> var_decl_lines var_decl_line
Rule 15    var_decl_line -> id_list COLON type SEMICOLON
Rule 16    var_decl_line -> id_list COLON type
Rule 17    id_list -> ID
Rule 18    id_list -> id_list COMMA ID
Rule 19    type -> INTEGERTYPE
Rule 20    type -> BOOLEANTYPE
Rule 21    type -> STRINGTYPE
Rule 22    begin_progr -> compound_statement DOT
Rule 23    statement_list -> statement
Rule 24    statement_list -> statement_list statement
Rule 25    statement -> COMMENT
Rule 26    statement -> simple_statement SEMICOLON
Rule 27    statement -> compound_statement SEMICOLON
Rule 28    statement -> selection_statement
Rule 29    statement -> for_statement
Rule 30    simple_statement -> ID ASSIGN expression
Rule 31    simple_statement -> WRITEFUNC LPAREN expression RPAREN
Rule 32    simple_statement -> WRITEFUNCLN LPAREN expression RPAREN
Rule 33    compound_statement -> BEGIN statement_list END
Rule 34    selection_statement -> IF expression THEN statement
Rule 35    selection_statement -> IF expression THEN statement ELSE statement
Rule 36    for_statement -> FOR ID ASSIGN expression TO expression DO statement
Rule 37    for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement
Rule 38    expression -> expression PLUS expression
Rule 39    expression -> expression MINUS expression
Rule 40    expression -> expression TIMES expression
Rule 41    expression -> expression DIVIDE expression
Rule 42    expression -> expression GT expression
Rule 43    expression -> STRING
Rule 44    expression -> NUMBER
Rule 45    expression -> CHAR
Rule 46    expression -> ID
Rule 47    expression -> ID LPAREN expression_list RPAREN
Rule 48    expression_list -> expression
Rule 49    expression_list -> expression_list COMMA expression

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 30 36 37
BEGIN                : 33
BOOLEANTYPE          : 20
BREAK                : 
CASE                 : 
CHAR                 : 45
COLON                : 9 15 16
COMMA                : 18 49
COMMENT              : 25
CONST                : 
DIVIDE               : 41
DO                   : 36 37
DOT                  : 22
DOWNTO               : 37
ELSE                 : 35
END                  : 33
EQ                   : 
FOR                  : 36 37
FUNCTION             : 9
GE                   : 
GT                   : 42
ID                   : 2 9 17 18 30 36 37 46 47
IF                   : 34 35
INTEGERTYPE          : 19
LE                   : 
LENGTHFUNC           : 
LPAREN               : 9 31 32 47
LT                   : 
MINUS                : 39
NE                   : 
NOT                  : 
NUMBER               : 44
OF                   : 
OR                   : 
PLUS                 : 38
PROCEDURE            : 
PROGRAM              : 1
READFUNC             : 
READFUNCLN           : 
REPEAT               : 
RPAREN               : 9 31 32 47
SEMICOLON            : 2 9 10 11 15 26 27
STRING               : 43
STRINGTYPE           : 21
THEN                 : 34 35
TIMES                : 40
TO                   : 36
TYPE                 : 
UNTIL                : 
VAR                  : 12
WHILE                : 
WRITEFUNC            : 31
WRITEFUNCLN          : 32
error                : 

Nonterminals, with rules where they appear

begin_func           : 9
begin_progr          : 3 4 5 6
compound_statement   : 10 11 22 27
expression           : 30 31 32 34 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 48 49
expression_list      : 47 49
for_statement        : 29
func_decl            : 7 8
func_decls           : 3 4 8
id_list              : 15 16 18
init                 : 0
program_body         : 2
program_name         : 1
selection_statement  : 28
simple_statement     : 26
statement            : 23 24 34 35 35 36 37
statement_list       : 24 33
type                 : 9 15 16
var_decl             : 3 5 10
var_decl_line        : 13 14
var_decl_lines       : 9 12 14

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . PROGRAM program_name

    PROGRAM         shift and go to state 2

    init                           shift and go to state 1

state 1

    (0) S' -> init .



state 2

    (1) init -> PROGRAM . program_name
    (2) program_name -> . ID SEMICOLON program_body

    ID              shift and go to state 4

    program_name                   shift and go to state 3

state 3

    (1) init -> PROGRAM program_name .

    $end            reduce using rule 1 (init -> PROGRAM program_name .)


state 4

    (2) program_name -> ID . SEMICOLON program_body

    SEMICOLON       shift and go to state 5


state 5

    (2) program_name -> ID SEMICOLON . program_body
    (3) program_body -> . func_decls var_decl begin_progr
    (4) program_body -> . func_decls begin_progr
    (5) program_body -> . var_decl begin_progr
    (6) program_body -> . begin_progr
    (7) func_decls -> . func_decl
    (8) func_decls -> . func_decls func_decl
    (12) var_decl -> . VAR var_decl_lines
    (22) begin_progr -> . compound_statement DOT
    (9) func_decl -> . FUNCTION ID LPAREN var_decl_lines RPAREN COLON type SEMICOLON begin_func
    (33) compound_statement -> . BEGIN statement_list END

    VAR             shift and go to state 11
    FUNCTION        shift and go to state 13
    BEGIN           shift and go to state 14

    program_body                   shift and go to state 6
    func_decls                     shift and go to state 7
    var_decl                       shift and go to state 8
    begin_progr                    shift and go to state 9
    func_decl                      shift and go to state 10
    compound_statement             shift and go to state 12

state 6

    (2) program_name -> ID SEMICOLON program_body .

    $end            reduce using rule 2 (program_name -> ID SEMICOLON program_body .)


state 7

    (3) program_body -> func_decls . var_decl begin_progr
    (4) program_body -> func_decls . begin_progr
    (8) func_decls -> func_decls . func_decl
    (12) var_decl -> . VAR var_decl_lines
    (22) begin_progr -> . compound_statement DOT
    (9) func_decl -> . FUNCTION ID LPAREN var_decl_lines RPAREN COLON type SEMICOLON begin_func
    (33) compound_statement -> . BEGIN statement_list END

    VAR             shift and go to state 11
    FUNCTION        shift and go to state 13
    BEGIN           shift and go to state 14

    var_decl                       shift and go to state 15
    begin_progr                    shift and go to state 16
    func_decl                      shift and go to state 17
    compound_statement             shift and go to state 12

state 8

    (5) program_body -> var_decl . begin_progr
    (22) begin_progr -> . compound_statement DOT
    (33) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 14

    begin_progr                    shift and go to state 18
    compound_statement             shift and go to state 12

state 9

    (6) program_body -> begin_progr .

    $end            reduce using rule 6 (program_body -> begin_progr .)


state 10

    (7) func_decls -> func_decl .

    VAR             reduce using rule 7 (func_decls -> func_decl .)
    FUNCTION        reduce using rule 7 (func_decls -> func_decl .)
    BEGIN           reduce using rule 7 (func_decls -> func_decl .)


state 11

    (12) var_decl -> VAR . var_decl_lines
    (13) var_decl_lines -> . var_decl_line
    (14) var_decl_lines -> . var_decl_lines var_decl_line
    (15) var_decl_line -> . id_list COLON type SEMICOLON
    (16) var_decl_line -> . id_list COLON type
    (17) id_list -> . ID
    (18) id_list -> . id_list COMMA ID

    ID              shift and go to state 22

    var_decl_lines                 shift and go to state 19
    var_decl_line                  shift and go to state 20
    id_list                        shift and go to state 21

state 12

    (22) begin_progr -> compound_statement . DOT

    DOT             shift and go to state 23


state 13

    (9) func_decl -> FUNCTION . ID LPAREN var_decl_lines RPAREN COLON type SEMICOLON begin_func

    ID              shift and go to state 24


state 14

    (33) compound_statement -> BEGIN . statement_list END
    (23) statement_list -> . statement
    (24) statement_list -> . statement_list statement
    (25) statement -> . COMMENT
    (26) statement -> . simple_statement SEMICOLON
    (27) statement -> . compound_statement SEMICOLON
    (28) statement -> . selection_statement
    (29) statement -> . for_statement
    (30) simple_statement -> . ID ASSIGN expression
    (31) simple_statement -> . WRITEFUNC LPAREN expression RPAREN
    (32) simple_statement -> . WRITEFUNCLN LPAREN expression RPAREN
    (33) compound_statement -> . BEGIN statement_list END
    (34) selection_statement -> . IF expression THEN statement
    (35) selection_statement -> . IF expression THEN statement ELSE statement
    (36) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (37) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement

    COMMENT         shift and go to state 27
    ID              shift and go to state 32
    WRITEFUNC       shift and go to state 33
    WRITEFUNCLN     shift and go to state 34
    BEGIN           shift and go to state 14
    IF              shift and go to state 35
    FOR             shift and go to state 36

    statement_list                 shift and go to state 25
    statement                      shift and go to state 26
    simple_statement               shift and go to state 28
    compound_statement             shift and go to state 29
    selection_statement            shift and go to state 30
    for_statement                  shift and go to state 31

state 15

    (3) program_body -> func_decls var_decl . begin_progr
    (22) begin_progr -> . compound_statement DOT
    (33) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 14

    begin_progr                    shift and go to state 37
    compound_statement             shift and go to state 12

state 16

    (4) program_body -> func_decls begin_progr .

    $end            reduce using rule 4 (program_body -> func_decls begin_progr .)


state 17

    (8) func_decls -> func_decls func_decl .

    VAR             reduce using rule 8 (func_decls -> func_decls func_decl .)
    FUNCTION        reduce using rule 8 (func_decls -> func_decls func_decl .)
    BEGIN           reduce using rule 8 (func_decls -> func_decls func_decl .)


state 18

    (5) program_body -> var_decl begin_progr .

    $end            reduce using rule 5 (program_body -> var_decl begin_progr .)


state 19

    (12) var_decl -> VAR var_decl_lines .
    (14) var_decl_lines -> var_decl_lines . var_decl_line
    (15) var_decl_line -> . id_list COLON type SEMICOLON
    (16) var_decl_line -> . id_list COLON type
    (17) id_list -> . ID
    (18) id_list -> . id_list COMMA ID

    BEGIN           reduce using rule 12 (var_decl -> VAR var_decl_lines .)
    ID              shift and go to state 22

    var_decl_line                  shift and go to state 38
    id_list                        shift and go to state 21

state 20

    (13) var_decl_lines -> var_decl_line .

    ID              reduce using rule 13 (var_decl_lines -> var_decl_line .)
    BEGIN           reduce using rule 13 (var_decl_lines -> var_decl_line .)
    RPAREN          reduce using rule 13 (var_decl_lines -> var_decl_line .)


state 21

    (15) var_decl_line -> id_list . COLON type SEMICOLON
    (16) var_decl_line -> id_list . COLON type
    (18) id_list -> id_list . COMMA ID

    COLON           shift and go to state 39
    COMMA           shift and go to state 40


state 22

    (17) id_list -> ID .

    COLON           reduce using rule 17 (id_list -> ID .)
    COMMA           reduce using rule 17 (id_list -> ID .)


state 23

    (22) begin_progr -> compound_statement DOT .

    $end            reduce using rule 22 (begin_progr -> compound_statement DOT .)


state 24

    (9) func_decl -> FUNCTION ID . LPAREN var_decl_lines RPAREN COLON type SEMICOLON begin_func

    LPAREN          shift and go to state 41


state 25

    (33) compound_statement -> BEGIN statement_list . END
    (24) statement_list -> statement_list . statement
    (25) statement -> . COMMENT
    (26) statement -> . simple_statement SEMICOLON
    (27) statement -> . compound_statement SEMICOLON
    (28) statement -> . selection_statement
    (29) statement -> . for_statement
    (30) simple_statement -> . ID ASSIGN expression
    (31) simple_statement -> . WRITEFUNC LPAREN expression RPAREN
    (32) simple_statement -> . WRITEFUNCLN LPAREN expression RPAREN
    (33) compound_statement -> . BEGIN statement_list END
    (34) selection_statement -> . IF expression THEN statement
    (35) selection_statement -> . IF expression THEN statement ELSE statement
    (36) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (37) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement

    END             shift and go to state 42
    COMMENT         shift and go to state 27
    ID              shift and go to state 32
    WRITEFUNC       shift and go to state 33
    WRITEFUNCLN     shift and go to state 34
    BEGIN           shift and go to state 14
    IF              shift and go to state 35
    FOR             shift and go to state 36

    statement                      shift and go to state 43
    simple_statement               shift and go to state 28
    compound_statement             shift and go to state 29
    selection_statement            shift and go to state 30
    for_statement                  shift and go to state 31

state 26

    (23) statement_list -> statement .

    END             reduce using rule 23 (statement_list -> statement .)
    COMMENT         reduce using rule 23 (statement_list -> statement .)
    ID              reduce using rule 23 (statement_list -> statement .)
    WRITEFUNC       reduce using rule 23 (statement_list -> statement .)
    WRITEFUNCLN     reduce using rule 23 (statement_list -> statement .)
    BEGIN           reduce using rule 23 (statement_list -> statement .)
    IF              reduce using rule 23 (statement_list -> statement .)
    FOR             reduce using rule 23 (statement_list -> statement .)


state 27

    (25) statement -> COMMENT .

    END             reduce using rule 25 (statement -> COMMENT .)
    COMMENT         reduce using rule 25 (statement -> COMMENT .)
    ID              reduce using rule 25 (statement -> COMMENT .)
    WRITEFUNC       reduce using rule 25 (statement -> COMMENT .)
    WRITEFUNCLN     reduce using rule 25 (statement -> COMMENT .)
    BEGIN           reduce using rule 25 (statement -> COMMENT .)
    IF              reduce using rule 25 (statement -> COMMENT .)
    FOR             reduce using rule 25 (statement -> COMMENT .)
    ELSE            reduce using rule 25 (statement -> COMMENT .)


state 28

    (26) statement -> simple_statement . SEMICOLON

    SEMICOLON       shift and go to state 44


state 29

    (27) statement -> compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 45


state 30

    (28) statement -> selection_statement .

    END             reduce using rule 28 (statement -> selection_statement .)
    COMMENT         reduce using rule 28 (statement -> selection_statement .)
    ID              reduce using rule 28 (statement -> selection_statement .)
    WRITEFUNC       reduce using rule 28 (statement -> selection_statement .)
    WRITEFUNCLN     reduce using rule 28 (statement -> selection_statement .)
    BEGIN           reduce using rule 28 (statement -> selection_statement .)
    IF              reduce using rule 28 (statement -> selection_statement .)
    FOR             reduce using rule 28 (statement -> selection_statement .)
    ELSE            reduce using rule 28 (statement -> selection_statement .)


state 31

    (29) statement -> for_statement .

    END             reduce using rule 29 (statement -> for_statement .)
    COMMENT         reduce using rule 29 (statement -> for_statement .)
    ID              reduce using rule 29 (statement -> for_statement .)
    WRITEFUNC       reduce using rule 29 (statement -> for_statement .)
    WRITEFUNCLN     reduce using rule 29 (statement -> for_statement .)
    BEGIN           reduce using rule 29 (statement -> for_statement .)
    IF              reduce using rule 29 (statement -> for_statement .)
    FOR             reduce using rule 29 (statement -> for_statement .)
    ELSE            reduce using rule 29 (statement -> for_statement .)


state 32

    (30) simple_statement -> ID . ASSIGN expression

    ASSIGN          shift and go to state 46


state 33

    (31) simple_statement -> WRITEFUNC . LPAREN expression RPAREN

    LPAREN          shift and go to state 47


state 34

    (32) simple_statement -> WRITEFUNCLN . LPAREN expression RPAREN

    LPAREN          shift and go to state 48


state 35

    (34) selection_statement -> IF . expression THEN statement
    (35) selection_statement -> IF . expression THEN statement ELSE statement
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression TIMES expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression GT expression
    (43) expression -> . STRING
    (44) expression -> . NUMBER
    (45) expression -> . CHAR
    (46) expression -> . ID
    (47) expression -> . ID LPAREN expression_list RPAREN

    STRING          shift and go to state 50
    NUMBER          shift and go to state 51
    CHAR            shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 49

state 36

    (36) for_statement -> FOR . ID ASSIGN expression TO expression DO statement
    (37) for_statement -> FOR . ID ASSIGN expression DOWNTO expression DO statement

    ID              shift and go to state 54


state 37

    (3) program_body -> func_decls var_decl begin_progr .

    $end            reduce using rule 3 (program_body -> func_decls var_decl begin_progr .)


state 38

    (14) var_decl_lines -> var_decl_lines var_decl_line .

    ID              reduce using rule 14 (var_decl_lines -> var_decl_lines var_decl_line .)
    BEGIN           reduce using rule 14 (var_decl_lines -> var_decl_lines var_decl_line .)
    RPAREN          reduce using rule 14 (var_decl_lines -> var_decl_lines var_decl_line .)


state 39

    (15) var_decl_line -> id_list COLON . type SEMICOLON
    (16) var_decl_line -> id_list COLON . type
    (19) type -> . INTEGERTYPE
    (20) type -> . BOOLEANTYPE
    (21) type -> . STRINGTYPE

    INTEGERTYPE     shift and go to state 56
    BOOLEANTYPE     shift and go to state 57
    STRINGTYPE      shift and go to state 58

    type                           shift and go to state 55

state 40

    (18) id_list -> id_list COMMA . ID

    ID              shift and go to state 59


state 41

    (9) func_decl -> FUNCTION ID LPAREN . var_decl_lines RPAREN COLON type SEMICOLON begin_func
    (13) var_decl_lines -> . var_decl_line
    (14) var_decl_lines -> . var_decl_lines var_decl_line
    (15) var_decl_line -> . id_list COLON type SEMICOLON
    (16) var_decl_line -> . id_list COLON type
    (17) id_list -> . ID
    (18) id_list -> . id_list COMMA ID

    ID              shift and go to state 22

    var_decl_lines                 shift and go to state 60
    var_decl_line                  shift and go to state 20
    id_list                        shift and go to state 21

state 42

    (33) compound_statement -> BEGIN statement_list END .

    DOT             reduce using rule 33 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 33 (compound_statement -> BEGIN statement_list END .)


state 43

    (24) statement_list -> statement_list statement .

    END             reduce using rule 24 (statement_list -> statement_list statement .)
    COMMENT         reduce using rule 24 (statement_list -> statement_list statement .)
    ID              reduce using rule 24 (statement_list -> statement_list statement .)
    WRITEFUNC       reduce using rule 24 (statement_list -> statement_list statement .)
    WRITEFUNCLN     reduce using rule 24 (statement_list -> statement_list statement .)
    BEGIN           reduce using rule 24 (statement_list -> statement_list statement .)
    IF              reduce using rule 24 (statement_list -> statement_list statement .)
    FOR             reduce using rule 24 (statement_list -> statement_list statement .)


state 44

    (26) statement -> simple_statement SEMICOLON .

    END             reduce using rule 26 (statement -> simple_statement SEMICOLON .)
    COMMENT         reduce using rule 26 (statement -> simple_statement SEMICOLON .)
    ID              reduce using rule 26 (statement -> simple_statement SEMICOLON .)
    WRITEFUNC       reduce using rule 26 (statement -> simple_statement SEMICOLON .)
    WRITEFUNCLN     reduce using rule 26 (statement -> simple_statement SEMICOLON .)
    BEGIN           reduce using rule 26 (statement -> simple_statement SEMICOLON .)
    IF              reduce using rule 26 (statement -> simple_statement SEMICOLON .)
    FOR             reduce using rule 26 (statement -> simple_statement SEMICOLON .)
    ELSE            reduce using rule 26 (statement -> simple_statement SEMICOLON .)


state 45

    (27) statement -> compound_statement SEMICOLON .

    END             reduce using rule 27 (statement -> compound_statement SEMICOLON .)
    COMMENT         reduce using rule 27 (statement -> compound_statement SEMICOLON .)
    ID              reduce using rule 27 (statement -> compound_statement SEMICOLON .)
    WRITEFUNC       reduce using rule 27 (statement -> compound_statement SEMICOLON .)
    WRITEFUNCLN     reduce using rule 27 (statement -> compound_statement SEMICOLON .)
    BEGIN           reduce using rule 27 (statement -> compound_statement SEMICOLON .)
    IF              reduce using rule 27 (statement -> compound_statement SEMICOLON .)
    FOR             reduce using rule 27 (statement -> compound_statement SEMICOLON .)
    ELSE            reduce using rule 27 (statement -> compound_statement SEMICOLON .)


state 46

    (30) simple_statement -> ID ASSIGN . expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression TIMES expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression GT expression
    (43) expression -> . STRING
    (44) expression -> . NUMBER
    (45) expression -> . CHAR
    (46) expression -> . ID
    (47) expression -> . ID LPAREN expression_list RPAREN

    STRING          shift and go to state 50
    NUMBER          shift and go to state 51
    CHAR            shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 61

state 47

    (31) simple_statement -> WRITEFUNC LPAREN . expression RPAREN
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression TIMES expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression GT expression
    (43) expression -> . STRING
    (44) expression -> . NUMBER
    (45) expression -> . CHAR
    (46) expression -> . ID
    (47) expression -> . ID LPAREN expression_list RPAREN

    STRING          shift and go to state 50
    NUMBER          shift and go to state 51
    CHAR            shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 62

state 48

    (32) simple_statement -> WRITEFUNCLN LPAREN . expression RPAREN
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression TIMES expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression GT expression
    (43) expression -> . STRING
    (44) expression -> . NUMBER
    (45) expression -> . CHAR
    (46) expression -> . ID
    (47) expression -> . ID LPAREN expression_list RPAREN

    STRING          shift and go to state 50
    NUMBER          shift and go to state 51
    CHAR            shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 63

state 49

    (34) selection_statement -> IF expression . THEN statement
    (35) selection_statement -> IF expression . THEN statement ELSE statement
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . TIMES expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . GT expression

    THEN            shift and go to state 64
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    GT              shift and go to state 69


state 50

    (43) expression -> STRING .

    THEN            reduce using rule 43 (expression -> STRING .)
    PLUS            reduce using rule 43 (expression -> STRING .)
    MINUS           reduce using rule 43 (expression -> STRING .)
    TIMES           reduce using rule 43 (expression -> STRING .)
    DIVIDE          reduce using rule 43 (expression -> STRING .)
    GT              reduce using rule 43 (expression -> STRING .)
    SEMICOLON       reduce using rule 43 (expression -> STRING .)
    RPAREN          reduce using rule 43 (expression -> STRING .)
    COMMA           reduce using rule 43 (expression -> STRING .)
    TO              reduce using rule 43 (expression -> STRING .)
    DOWNTO          reduce using rule 43 (expression -> STRING .)
    DO              reduce using rule 43 (expression -> STRING .)


state 51

    (44) expression -> NUMBER .

    THEN            reduce using rule 44 (expression -> NUMBER .)
    PLUS            reduce using rule 44 (expression -> NUMBER .)
    MINUS           reduce using rule 44 (expression -> NUMBER .)
    TIMES           reduce using rule 44 (expression -> NUMBER .)
    DIVIDE          reduce using rule 44 (expression -> NUMBER .)
    GT              reduce using rule 44 (expression -> NUMBER .)
    SEMICOLON       reduce using rule 44 (expression -> NUMBER .)
    RPAREN          reduce using rule 44 (expression -> NUMBER .)
    COMMA           reduce using rule 44 (expression -> NUMBER .)
    TO              reduce using rule 44 (expression -> NUMBER .)
    DOWNTO          reduce using rule 44 (expression -> NUMBER .)
    DO              reduce using rule 44 (expression -> NUMBER .)


state 52

    (45) expression -> CHAR .

    THEN            reduce using rule 45 (expression -> CHAR .)
    PLUS            reduce using rule 45 (expression -> CHAR .)
    MINUS           reduce using rule 45 (expression -> CHAR .)
    TIMES           reduce using rule 45 (expression -> CHAR .)
    DIVIDE          reduce using rule 45 (expression -> CHAR .)
    GT              reduce using rule 45 (expression -> CHAR .)
    SEMICOLON       reduce using rule 45 (expression -> CHAR .)
    RPAREN          reduce using rule 45 (expression -> CHAR .)
    COMMA           reduce using rule 45 (expression -> CHAR .)
    TO              reduce using rule 45 (expression -> CHAR .)
    DOWNTO          reduce using rule 45 (expression -> CHAR .)
    DO              reduce using rule 45 (expression -> CHAR .)


state 53

    (46) expression -> ID .
    (47) expression -> ID . LPAREN expression_list RPAREN

    THEN            reduce using rule 46 (expression -> ID .)
    PLUS            reduce using rule 46 (expression -> ID .)
    MINUS           reduce using rule 46 (expression -> ID .)
    TIMES           reduce using rule 46 (expression -> ID .)
    DIVIDE          reduce using rule 46 (expression -> ID .)
    GT              reduce using rule 46 (expression -> ID .)
    SEMICOLON       reduce using rule 46 (expression -> ID .)
    RPAREN          reduce using rule 46 (expression -> ID .)
    COMMA           reduce using rule 46 (expression -> ID .)
    TO              reduce using rule 46 (expression -> ID .)
    DOWNTO          reduce using rule 46 (expression -> ID .)
    DO              reduce using rule 46 (expression -> ID .)
    LPAREN          shift and go to state 70


state 54

    (36) for_statement -> FOR ID . ASSIGN expression TO expression DO statement
    (37) for_statement -> FOR ID . ASSIGN expression DOWNTO expression DO statement

    ASSIGN          shift and go to state 71


state 55

    (15) var_decl_line -> id_list COLON type . SEMICOLON
    (16) var_decl_line -> id_list COLON type .

    SEMICOLON       shift and go to state 72
    ID              reduce using rule 16 (var_decl_line -> id_list COLON type .)
    BEGIN           reduce using rule 16 (var_decl_line -> id_list COLON type .)
    RPAREN          reduce using rule 16 (var_decl_line -> id_list COLON type .)


state 56

    (19) type -> INTEGERTYPE .

    SEMICOLON       reduce using rule 19 (type -> INTEGERTYPE .)
    ID              reduce using rule 19 (type -> INTEGERTYPE .)
    BEGIN           reduce using rule 19 (type -> INTEGERTYPE .)
    RPAREN          reduce using rule 19 (type -> INTEGERTYPE .)


state 57

    (20) type -> BOOLEANTYPE .

    SEMICOLON       reduce using rule 20 (type -> BOOLEANTYPE .)
    ID              reduce using rule 20 (type -> BOOLEANTYPE .)
    BEGIN           reduce using rule 20 (type -> BOOLEANTYPE .)
    RPAREN          reduce using rule 20 (type -> BOOLEANTYPE .)


state 58

    (21) type -> STRINGTYPE .

    SEMICOLON       reduce using rule 21 (type -> STRINGTYPE .)
    ID              reduce using rule 21 (type -> STRINGTYPE .)
    BEGIN           reduce using rule 21 (type -> STRINGTYPE .)
    RPAREN          reduce using rule 21 (type -> STRINGTYPE .)


state 59

    (18) id_list -> id_list COMMA ID .

    COLON           reduce using rule 18 (id_list -> id_list COMMA ID .)
    COMMA           reduce using rule 18 (id_list -> id_list COMMA ID .)


state 60

    (9) func_decl -> FUNCTION ID LPAREN var_decl_lines . RPAREN COLON type SEMICOLON begin_func
    (14) var_decl_lines -> var_decl_lines . var_decl_line
    (15) var_decl_line -> . id_list COLON type SEMICOLON
    (16) var_decl_line -> . id_list COLON type
    (17) id_list -> . ID
    (18) id_list -> . id_list COMMA ID

    RPAREN          shift and go to state 73
    ID              shift and go to state 22

    var_decl_line                  shift and go to state 38
    id_list                        shift and go to state 21

state 61

    (30) simple_statement -> ID ASSIGN expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . TIMES expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . GT expression

    SEMICOLON       reduce using rule 30 (simple_statement -> ID ASSIGN expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    GT              shift and go to state 69


state 62

    (31) simple_statement -> WRITEFUNC LPAREN expression . RPAREN
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . TIMES expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . GT expression

    RPAREN          shift and go to state 74
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    GT              shift and go to state 69


state 63

    (32) simple_statement -> WRITEFUNCLN LPAREN expression . RPAREN
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . TIMES expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . GT expression

    RPAREN          shift and go to state 75
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    GT              shift and go to state 69


state 64

    (34) selection_statement -> IF expression THEN . statement
    (35) selection_statement -> IF expression THEN . statement ELSE statement
    (25) statement -> . COMMENT
    (26) statement -> . simple_statement SEMICOLON
    (27) statement -> . compound_statement SEMICOLON
    (28) statement -> . selection_statement
    (29) statement -> . for_statement
    (30) simple_statement -> . ID ASSIGN expression
    (31) simple_statement -> . WRITEFUNC LPAREN expression RPAREN
    (32) simple_statement -> . WRITEFUNCLN LPAREN expression RPAREN
    (33) compound_statement -> . BEGIN statement_list END
    (34) selection_statement -> . IF expression THEN statement
    (35) selection_statement -> . IF expression THEN statement ELSE statement
    (36) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (37) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement

    COMMENT         shift and go to state 27
    ID              shift and go to state 32
    WRITEFUNC       shift and go to state 33
    WRITEFUNCLN     shift and go to state 34
    BEGIN           shift and go to state 14
    IF              shift and go to state 35
    FOR             shift and go to state 36

    statement                      shift and go to state 76
    simple_statement               shift and go to state 28
    compound_statement             shift and go to state 29
    selection_statement            shift and go to state 30
    for_statement                  shift and go to state 31

state 65

    (38) expression -> expression PLUS . expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression TIMES expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression GT expression
    (43) expression -> . STRING
    (44) expression -> . NUMBER
    (45) expression -> . CHAR
    (46) expression -> . ID
    (47) expression -> . ID LPAREN expression_list RPAREN

    STRING          shift and go to state 50
    NUMBER          shift and go to state 51
    CHAR            shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 77

state 66

    (39) expression -> expression MINUS . expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression TIMES expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression GT expression
    (43) expression -> . STRING
    (44) expression -> . NUMBER
    (45) expression -> . CHAR
    (46) expression -> . ID
    (47) expression -> . ID LPAREN expression_list RPAREN

    STRING          shift and go to state 50
    NUMBER          shift and go to state 51
    CHAR            shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 78

state 67

    (40) expression -> expression TIMES . expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression TIMES expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression GT expression
    (43) expression -> . STRING
    (44) expression -> . NUMBER
    (45) expression -> . CHAR
    (46) expression -> . ID
    (47) expression -> . ID LPAREN expression_list RPAREN

    STRING          shift and go to state 50
    NUMBER          shift and go to state 51
    CHAR            shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 79

state 68

    (41) expression -> expression DIVIDE . expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression TIMES expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression GT expression
    (43) expression -> . STRING
    (44) expression -> . NUMBER
    (45) expression -> . CHAR
    (46) expression -> . ID
    (47) expression -> . ID LPAREN expression_list RPAREN

    STRING          shift and go to state 50
    NUMBER          shift and go to state 51
    CHAR            shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 80

state 69

    (42) expression -> expression GT . expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression TIMES expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression GT expression
    (43) expression -> . STRING
    (44) expression -> . NUMBER
    (45) expression -> . CHAR
    (46) expression -> . ID
    (47) expression -> . ID LPAREN expression_list RPAREN

    STRING          shift and go to state 50
    NUMBER          shift and go to state 51
    CHAR            shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 81

state 70

    (47) expression -> ID LPAREN . expression_list RPAREN
    (48) expression_list -> . expression
    (49) expression_list -> . expression_list COMMA expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression TIMES expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression GT expression
    (43) expression -> . STRING
    (44) expression -> . NUMBER
    (45) expression -> . CHAR
    (46) expression -> . ID
    (47) expression -> . ID LPAREN expression_list RPAREN

    STRING          shift and go to state 50
    NUMBER          shift and go to state 51
    CHAR            shift and go to state 52
    ID              shift and go to state 53

    expression_list                shift and go to state 82
    expression                     shift and go to state 83

state 71

    (36) for_statement -> FOR ID ASSIGN . expression TO expression DO statement
    (37) for_statement -> FOR ID ASSIGN . expression DOWNTO expression DO statement
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression TIMES expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression GT expression
    (43) expression -> . STRING
    (44) expression -> . NUMBER
    (45) expression -> . CHAR
    (46) expression -> . ID
    (47) expression -> . ID LPAREN expression_list RPAREN

    STRING          shift and go to state 50
    NUMBER          shift and go to state 51
    CHAR            shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 84

state 72

    (15) var_decl_line -> id_list COLON type SEMICOLON .

    ID              reduce using rule 15 (var_decl_line -> id_list COLON type SEMICOLON .)
    BEGIN           reduce using rule 15 (var_decl_line -> id_list COLON type SEMICOLON .)
    RPAREN          reduce using rule 15 (var_decl_line -> id_list COLON type SEMICOLON .)


state 73

    (9) func_decl -> FUNCTION ID LPAREN var_decl_lines RPAREN . COLON type SEMICOLON begin_func

    COLON           shift and go to state 85


state 74

    (31) simple_statement -> WRITEFUNC LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 31 (simple_statement -> WRITEFUNC LPAREN expression RPAREN .)


state 75

    (32) simple_statement -> WRITEFUNCLN LPAREN expression RPAREN .

    SEMICOLON       reduce using rule 32 (simple_statement -> WRITEFUNCLN LPAREN expression RPAREN .)


state 76

    (34) selection_statement -> IF expression THEN statement .
    (35) selection_statement -> IF expression THEN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    END             reduce using rule 34 (selection_statement -> IF expression THEN statement .)
    COMMENT         reduce using rule 34 (selection_statement -> IF expression THEN statement .)
    ID              reduce using rule 34 (selection_statement -> IF expression THEN statement .)
    WRITEFUNC       reduce using rule 34 (selection_statement -> IF expression THEN statement .)
    WRITEFUNCLN     reduce using rule 34 (selection_statement -> IF expression THEN statement .)
    BEGIN           reduce using rule 34 (selection_statement -> IF expression THEN statement .)
    IF              reduce using rule 34 (selection_statement -> IF expression THEN statement .)
    FOR             reduce using rule 34 (selection_statement -> IF expression THEN statement .)
    ELSE            shift and go to state 86

  ! ELSE            [ reduce using rule 34 (selection_statement -> IF expression THEN statement .) ]


state 77

    (38) expression -> expression PLUS expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . TIMES expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . GT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
    THEN            reduce using rule 38 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 38 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 38 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 38 (expression -> expression PLUS expression .)
    TO              reduce using rule 38 (expression -> expression PLUS expression .)
    DOWNTO          reduce using rule 38 (expression -> expression PLUS expression .)
    DO              reduce using rule 38 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    GT              shift and go to state 69

  ! PLUS            [ reduce using rule 38 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 38 (expression -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 38 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 38 (expression -> expression PLUS expression .) ]
  ! GT              [ reduce using rule 38 (expression -> expression PLUS expression .) ]


state 78

    (39) expression -> expression MINUS expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . TIMES expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . GT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
    THEN            reduce using rule 39 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 39 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 39 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 39 (expression -> expression MINUS expression .)
    TO              reduce using rule 39 (expression -> expression MINUS expression .)
    DOWNTO          reduce using rule 39 (expression -> expression MINUS expression .)
    DO              reduce using rule 39 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    GT              shift and go to state 69

  ! PLUS            [ reduce using rule 39 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 39 (expression -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 39 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 39 (expression -> expression MINUS expression .) ]
  ! GT              [ reduce using rule 39 (expression -> expression MINUS expression .) ]


state 79

    (40) expression -> expression TIMES expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . TIMES expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . GT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
    THEN            reduce using rule 40 (expression -> expression TIMES expression .)
    SEMICOLON       reduce using rule 40 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 40 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 40 (expression -> expression TIMES expression .)
    TO              reduce using rule 40 (expression -> expression TIMES expression .)
    DOWNTO          reduce using rule 40 (expression -> expression TIMES expression .)
    DO              reduce using rule 40 (expression -> expression TIMES expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    GT              shift and go to state 69

  ! PLUS            [ reduce using rule 40 (expression -> expression TIMES expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression TIMES expression .) ]
  ! TIMES           [ reduce using rule 40 (expression -> expression TIMES expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression TIMES expression .) ]
  ! GT              [ reduce using rule 40 (expression -> expression TIMES expression .) ]


state 80

    (41) expression -> expression DIVIDE expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . TIMES expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . GT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
    THEN            reduce using rule 41 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 41 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 41 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 41 (expression -> expression DIVIDE expression .)
    TO              reduce using rule 41 (expression -> expression DIVIDE expression .)
    DOWNTO          reduce using rule 41 (expression -> expression DIVIDE expression .)
    DO              reduce using rule 41 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    GT              shift and go to state 69

  ! PLUS            [ reduce using rule 41 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression DIVIDE expression .) ]
  ! TIMES           [ reduce using rule 41 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression DIVIDE expression .) ]
  ! GT              [ reduce using rule 41 (expression -> expression DIVIDE expression .) ]


state 81

    (42) expression -> expression GT expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . TIMES expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . GT expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
    THEN            reduce using rule 42 (expression -> expression GT expression .)
    SEMICOLON       reduce using rule 42 (expression -> expression GT expression .)
    RPAREN          reduce using rule 42 (expression -> expression GT expression .)
    COMMA           reduce using rule 42 (expression -> expression GT expression .)
    TO              reduce using rule 42 (expression -> expression GT expression .)
    DOWNTO          reduce using rule 42 (expression -> expression GT expression .)
    DO              reduce using rule 42 (expression -> expression GT expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    GT              shift and go to state 69

  ! PLUS            [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression GT expression .) ]
  ! GT              [ reduce using rule 42 (expression -> expression GT expression .) ]


state 82

    (47) expression -> ID LPAREN expression_list . RPAREN
    (49) expression_list -> expression_list . COMMA expression

    RPAREN          shift and go to state 87
    COMMA           shift and go to state 88


state 83

    (48) expression_list -> expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . TIMES expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . GT expression

    RPAREN          reduce using rule 48 (expression_list -> expression .)
    COMMA           reduce using rule 48 (expression_list -> expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    GT              shift and go to state 69


state 84

    (36) for_statement -> FOR ID ASSIGN expression . TO expression DO statement
    (37) for_statement -> FOR ID ASSIGN expression . DOWNTO expression DO statement
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . TIMES expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . GT expression

    TO              shift and go to state 89
    DOWNTO          shift and go to state 90
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    GT              shift and go to state 69


state 85

    (9) func_decl -> FUNCTION ID LPAREN var_decl_lines RPAREN COLON . type SEMICOLON begin_func
    (19) type -> . INTEGERTYPE
    (20) type -> . BOOLEANTYPE
    (21) type -> . STRINGTYPE

    INTEGERTYPE     shift and go to state 56
    BOOLEANTYPE     shift and go to state 57
    STRINGTYPE      shift and go to state 58

    type                           shift and go to state 91

state 86

    (35) selection_statement -> IF expression THEN statement ELSE . statement
    (25) statement -> . COMMENT
    (26) statement -> . simple_statement SEMICOLON
    (27) statement -> . compound_statement SEMICOLON
    (28) statement -> . selection_statement
    (29) statement -> . for_statement
    (30) simple_statement -> . ID ASSIGN expression
    (31) simple_statement -> . WRITEFUNC LPAREN expression RPAREN
    (32) simple_statement -> . WRITEFUNCLN LPAREN expression RPAREN
    (33) compound_statement -> . BEGIN statement_list END
    (34) selection_statement -> . IF expression THEN statement
    (35) selection_statement -> . IF expression THEN statement ELSE statement
    (36) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (37) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement

    COMMENT         shift and go to state 27
    ID              shift and go to state 32
    WRITEFUNC       shift and go to state 33
    WRITEFUNCLN     shift and go to state 34
    BEGIN           shift and go to state 14
    IF              shift and go to state 35
    FOR             shift and go to state 36

    statement                      shift and go to state 92
    simple_statement               shift and go to state 28
    compound_statement             shift and go to state 29
    selection_statement            shift and go to state 30
    for_statement                  shift and go to state 31

state 87

    (47) expression -> ID LPAREN expression_list RPAREN .

    THEN            reduce using rule 47 (expression -> ID LPAREN expression_list RPAREN .)
    PLUS            reduce using rule 47 (expression -> ID LPAREN expression_list RPAREN .)
    MINUS           reduce using rule 47 (expression -> ID LPAREN expression_list RPAREN .)
    TIMES           reduce using rule 47 (expression -> ID LPAREN expression_list RPAREN .)
    DIVIDE          reduce using rule 47 (expression -> ID LPAREN expression_list RPAREN .)
    GT              reduce using rule 47 (expression -> ID LPAREN expression_list RPAREN .)
    SEMICOLON       reduce using rule 47 (expression -> ID LPAREN expression_list RPAREN .)
    RPAREN          reduce using rule 47 (expression -> ID LPAREN expression_list RPAREN .)
    COMMA           reduce using rule 47 (expression -> ID LPAREN expression_list RPAREN .)
    TO              reduce using rule 47 (expression -> ID LPAREN expression_list RPAREN .)
    DOWNTO          reduce using rule 47 (expression -> ID LPAREN expression_list RPAREN .)
    DO              reduce using rule 47 (expression -> ID LPAREN expression_list RPAREN .)


state 88

    (49) expression_list -> expression_list COMMA . expression
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression TIMES expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression GT expression
    (43) expression -> . STRING
    (44) expression -> . NUMBER
    (45) expression -> . CHAR
    (46) expression -> . ID
    (47) expression -> . ID LPAREN expression_list RPAREN

    STRING          shift and go to state 50
    NUMBER          shift and go to state 51
    CHAR            shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 93

state 89

    (36) for_statement -> FOR ID ASSIGN expression TO . expression DO statement
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression TIMES expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression GT expression
    (43) expression -> . STRING
    (44) expression -> . NUMBER
    (45) expression -> . CHAR
    (46) expression -> . ID
    (47) expression -> . ID LPAREN expression_list RPAREN

    STRING          shift and go to state 50
    NUMBER          shift and go to state 51
    CHAR            shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 94

state 90

    (37) for_statement -> FOR ID ASSIGN expression DOWNTO . expression DO statement
    (38) expression -> . expression PLUS expression
    (39) expression -> . expression MINUS expression
    (40) expression -> . expression TIMES expression
    (41) expression -> . expression DIVIDE expression
    (42) expression -> . expression GT expression
    (43) expression -> . STRING
    (44) expression -> . NUMBER
    (45) expression -> . CHAR
    (46) expression -> . ID
    (47) expression -> . ID LPAREN expression_list RPAREN

    STRING          shift and go to state 50
    NUMBER          shift and go to state 51
    CHAR            shift and go to state 52
    ID              shift and go to state 53

    expression                     shift and go to state 95

state 91

    (9) func_decl -> FUNCTION ID LPAREN var_decl_lines RPAREN COLON type . SEMICOLON begin_func

    SEMICOLON       shift and go to state 96


state 92

    (35) selection_statement -> IF expression THEN statement ELSE statement .

    END             reduce using rule 35 (selection_statement -> IF expression THEN statement ELSE statement .)
    COMMENT         reduce using rule 35 (selection_statement -> IF expression THEN statement ELSE statement .)
    ID              reduce using rule 35 (selection_statement -> IF expression THEN statement ELSE statement .)
    WRITEFUNC       reduce using rule 35 (selection_statement -> IF expression THEN statement ELSE statement .)
    WRITEFUNCLN     reduce using rule 35 (selection_statement -> IF expression THEN statement ELSE statement .)
    BEGIN           reduce using rule 35 (selection_statement -> IF expression THEN statement ELSE statement .)
    IF              reduce using rule 35 (selection_statement -> IF expression THEN statement ELSE statement .)
    FOR             reduce using rule 35 (selection_statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 35 (selection_statement -> IF expression THEN statement ELSE statement .)


state 93

    (49) expression_list -> expression_list COMMA expression .
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . TIMES expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . GT expression

    RPAREN          reduce using rule 49 (expression_list -> expression_list COMMA expression .)
    COMMA           reduce using rule 49 (expression_list -> expression_list COMMA expression .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    GT              shift and go to state 69


state 94

    (36) for_statement -> FOR ID ASSIGN expression TO expression . DO statement
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . TIMES expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . GT expression

    DO              shift and go to state 97
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    GT              shift and go to state 69


state 95

    (37) for_statement -> FOR ID ASSIGN expression DOWNTO expression . DO statement
    (38) expression -> expression . PLUS expression
    (39) expression -> expression . MINUS expression
    (40) expression -> expression . TIMES expression
    (41) expression -> expression . DIVIDE expression
    (42) expression -> expression . GT expression

    DO              shift and go to state 98
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIVIDE          shift and go to state 68
    GT              shift and go to state 69


state 96

    (9) func_decl -> FUNCTION ID LPAREN var_decl_lines RPAREN COLON type SEMICOLON . begin_func
    (10) begin_func -> . var_decl compound_statement SEMICOLON
    (11) begin_func -> . compound_statement SEMICOLON
    (12) var_decl -> . VAR var_decl_lines
    (33) compound_statement -> . BEGIN statement_list END

    VAR             shift and go to state 11
    BEGIN           shift and go to state 14

    begin_func                     shift and go to state 99
    var_decl                       shift and go to state 100
    compound_statement             shift and go to state 101

state 97

    (36) for_statement -> FOR ID ASSIGN expression TO expression DO . statement
    (25) statement -> . COMMENT
    (26) statement -> . simple_statement SEMICOLON
    (27) statement -> . compound_statement SEMICOLON
    (28) statement -> . selection_statement
    (29) statement -> . for_statement
    (30) simple_statement -> . ID ASSIGN expression
    (31) simple_statement -> . WRITEFUNC LPAREN expression RPAREN
    (32) simple_statement -> . WRITEFUNCLN LPAREN expression RPAREN
    (33) compound_statement -> . BEGIN statement_list END
    (34) selection_statement -> . IF expression THEN statement
    (35) selection_statement -> . IF expression THEN statement ELSE statement
    (36) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (37) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement

    COMMENT         shift and go to state 27
    ID              shift and go to state 32
    WRITEFUNC       shift and go to state 33
    WRITEFUNCLN     shift and go to state 34
    BEGIN           shift and go to state 14
    IF              shift and go to state 35
    FOR             shift and go to state 36

    statement                      shift and go to state 102
    simple_statement               shift and go to state 28
    compound_statement             shift and go to state 29
    selection_statement            shift and go to state 30
    for_statement                  shift and go to state 31

state 98

    (37) for_statement -> FOR ID ASSIGN expression DOWNTO expression DO . statement
    (25) statement -> . COMMENT
    (26) statement -> . simple_statement SEMICOLON
    (27) statement -> . compound_statement SEMICOLON
    (28) statement -> . selection_statement
    (29) statement -> . for_statement
    (30) simple_statement -> . ID ASSIGN expression
    (31) simple_statement -> . WRITEFUNC LPAREN expression RPAREN
    (32) simple_statement -> . WRITEFUNCLN LPAREN expression RPAREN
    (33) compound_statement -> . BEGIN statement_list END
    (34) selection_statement -> . IF expression THEN statement
    (35) selection_statement -> . IF expression THEN statement ELSE statement
    (36) for_statement -> . FOR ID ASSIGN expression TO expression DO statement
    (37) for_statement -> . FOR ID ASSIGN expression DOWNTO expression DO statement

    COMMENT         shift and go to state 27
    ID              shift and go to state 32
    WRITEFUNC       shift and go to state 33
    WRITEFUNCLN     shift and go to state 34
    BEGIN           shift and go to state 14
    IF              shift and go to state 35
    FOR             shift and go to state 36

    statement                      shift and go to state 103
    simple_statement               shift and go to state 28
    compound_statement             shift and go to state 29
    selection_statement            shift and go to state 30
    for_statement                  shift and go to state 31

state 99

    (9) func_decl -> FUNCTION ID LPAREN var_decl_lines RPAREN COLON type SEMICOLON begin_func .

    VAR             reduce using rule 9 (func_decl -> FUNCTION ID LPAREN var_decl_lines RPAREN COLON type SEMICOLON begin_func .)
    FUNCTION        reduce using rule 9 (func_decl -> FUNCTION ID LPAREN var_decl_lines RPAREN COLON type SEMICOLON begin_func .)
    BEGIN           reduce using rule 9 (func_decl -> FUNCTION ID LPAREN var_decl_lines RPAREN COLON type SEMICOLON begin_func .)


state 100

    (10) begin_func -> var_decl . compound_statement SEMICOLON
    (33) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 14

    compound_statement             shift and go to state 104

state 101

    (11) begin_func -> compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 105


state 102

    (36) for_statement -> FOR ID ASSIGN expression TO expression DO statement .

    END             reduce using rule 36 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    COMMENT         reduce using rule 36 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ID              reduce using rule 36 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    WRITEFUNC       reduce using rule 36 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    WRITEFUNCLN     reduce using rule 36 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    BEGIN           reduce using rule 36 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    IF              reduce using rule 36 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    FOR             reduce using rule 36 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)
    ELSE            reduce using rule 36 (for_statement -> FOR ID ASSIGN expression TO expression DO statement .)


state 103

    (37) for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .

    END             reduce using rule 37 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    COMMENT         reduce using rule 37 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    ID              reduce using rule 37 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    WRITEFUNC       reduce using rule 37 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    WRITEFUNCLN     reduce using rule 37 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    BEGIN           reduce using rule 37 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    IF              reduce using rule 37 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    FOR             reduce using rule 37 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)
    ELSE            reduce using rule 37 (for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement .)


state 104

    (10) begin_func -> var_decl compound_statement . SEMICOLON

    SEMICOLON       shift and go to state 106


state 105

    (11) begin_func -> compound_statement SEMICOLON .

    VAR             reduce using rule 11 (begin_func -> compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 11 (begin_func -> compound_statement SEMICOLON .)
    BEGIN           reduce using rule 11 (begin_func -> compound_statement SEMICOLON .)


state 106

    (10) begin_func -> var_decl compound_statement SEMICOLON .

    VAR             reduce using rule 10 (begin_func -> var_decl compound_statement SEMICOLON .)
    FUNCTION        reduce using rule 10 (begin_func -> var_decl compound_statement SEMICOLON .)
    BEGIN           reduce using rule 10 (begin_func -> var_decl compound_statement SEMICOLON .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 76 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 77 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 77 resolved as shift
WARNING: shift/reduce conflict for GT in state 77 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 78 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 78 resolved as shift
WARNING: shift/reduce conflict for GT in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 79 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 79 resolved as shift
WARNING: shift/reduce conflict for GT in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 80 resolved as shift
WARNING: shift/reduce conflict for GT in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 81 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 81 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 81 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 81 resolved as shift
WARNING: shift/reduce conflict for GT in state 81 resolved as shift
