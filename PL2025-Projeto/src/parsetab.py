
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN BOOLEANTYPE BREAK CASE CHAR COLON COMMA COMMENT CONST DIVIDE DO DOT DOWNTO ELSE END EQ FOR FUNCTION GE GT ID IF INTEGERTYPE LE LENGTHFUNC LPAREN LT MINUS NE NOT NUMBER OF OR PLUS PROCEDURE PROGRAM READFUNC READFUNCLN REPEAT RPAREN SEMICOLON STRING STRINGTYPE THEN TIMES TO TYPE UNTIL VAR WHILE WRITEFUNC WRITEFUNCLNinit : PROGRAM program_nameprogram_name : ID SEMICOLON program_bodyprogram_body : func_decls var_decl begin_progr\n| func_decls  begin_progr\n| var_decl begin_progr\n| begin_progrfunc_decls : func_decl \n| func_decls func_declfunc_decl : FUNCTION ID LPAREN var_decl_lines RPAREN COLON type SEMICOLON begin_funcbegin_func : var_decl compound_statement SEMICOLON\n| compound_statement SEMICOLONvar_decl : VAR var_decl_linesvar_decl_lines : var_decl_line\n| var_decl_lines var_decl_linevar_decl_line : id_list COLON type SEMICOLON\n| id_list COLON typeid_list : ID\n| id_list COMMA IDtype : INTEGERTYPE\n| BOOLEANTYPE\n| STRINGTYPEbegin_progr : compound_statement DOTstatement_list : statement\n| statement_list statementstatement : COMMENT\n| simple_statement SEMICOLON\n| compound_statement SEMICOLON\n| selection_statement\n| for_statementsimple_statement : ID ASSIGN expression\n| WRITEFUNC LPAREN expression RPAREN\n| WRITEFUNCLN LPAREN expression RPARENcompound_statement : BEGIN statement_list ENDselection_statement : IF expression THEN statement\n| IF expression THEN statement ELSE statementfor_statement : FOR ID ASSIGN expression TO expression DO statement\n| FOR ID ASSIGN expression DOWNTO expression DO statementexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression GT expressionexpression : STRING\n| NUMBER\n| CHAR\n| IDexpression : ID LPAREN expression_list RPARENexpression_list : expression\n| expression_list COMMA expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,3,6,9,16,18,23,37,],[0,-1,-2,-6,-4,-5,-22,-3,]),'ID':([2,11,13,14,19,20,25,26,27,30,31,35,36,38,40,41,43,44,45,46,47,48,55,56,57,58,60,64,65,66,67,68,69,70,71,72,76,86,88,89,90,92,97,98,102,103,],[4,22,24,32,22,-13,32,-23,-25,-28,-29,53,54,-14,59,22,-24,-26,-27,53,53,53,-16,-19,-20,-21,22,32,53,53,53,53,53,53,53,-15,-34,32,53,53,53,-35,32,32,-36,-37,]),'SEMICOLON':([4,28,29,42,50,51,52,53,55,56,57,58,61,74,75,77,78,79,80,81,87,91,101,104,],[5,44,45,-33,-43,-44,-45,-46,72,-19,-20,-21,-30,-31,-32,-38,-39,-40,-41,-42,-47,96,105,106,]),'VAR':([5,7,10,17,96,99,105,106,],[11,11,-7,-8,11,-9,-11,-10,]),'FUNCTION':([5,7,10,17,99,105,106,],[13,13,-7,-8,-9,-11,-10,]),'BEGIN':([5,7,8,10,14,15,17,19,20,25,26,27,30,31,38,43,44,45,55,56,57,58,64,72,76,86,92,96,97,98,99,100,102,103,105,106,],[14,14,14,-7,14,14,-8,-12,-13,14,-23,-25,-28,-29,-14,-24,-26,-27,-16,-19,-20,-21,14,-15,-34,14,-35,14,14,14,-9,14,-36,-37,-11,-10,]),'DOT':([12,42,],[23,-33,]),'COMMENT':([14,25,26,27,30,31,43,44,45,64,76,86,92,97,98,102,103,],[27,27,-23,-25,-28,-29,-24,-26,-27,27,-34,27,-35,27,27,-36,-37,]),'WRITEFUNC':([14,25,26,27,30,31,43,44,45,64,76,86,92,97,98,102,103,],[33,33,-23,-25,-28,-29,-24,-26,-27,33,-34,33,-35,33,33,-36,-37,]),'WRITEFUNCLN':([14,25,26,27,30,31,43,44,45,64,76,86,92,97,98,102,103,],[34,34,-23,-25,-28,-29,-24,-26,-27,34,-34,34,-35,34,34,-36,-37,]),'IF':([14,25,26,27,30,31,43,44,45,64,76,86,92,97,98,102,103,],[35,35,-23,-25,-28,-29,-24,-26,-27,35,-34,35,-35,35,35,-36,-37,]),'FOR':([14,25,26,27,30,31,43,44,45,64,76,86,92,97,98,102,103,],[36,36,-23,-25,-28,-29,-24,-26,-27,36,-34,36,-35,36,36,-36,-37,]),'RPAREN':([20,38,50,51,52,53,55,56,57,58,60,62,63,72,77,78,79,80,81,82,83,87,93,],[-13,-14,-43,-44,-45,-46,-16,-19,-20,-21,73,74,75,-15,-38,-39,-40,-41,-42,87,-48,-47,-49,]),'COLON':([21,22,59,73,],[39,-17,-18,85,]),'COMMA':([21,22,50,51,52,53,59,77,78,79,80,81,82,83,87,93,],[40,-17,-43,-44,-45,-46,-18,-38,-39,-40,-41,-42,88,-48,-47,-49,]),'LPAREN':([24,33,34,53,],[41,47,48,70,]),'END':([25,26,27,30,31,43,44,45,76,92,102,103,],[42,-23,-25,-28,-29,-24,-26,-27,-34,-35,-36,-37,]),'ELSE':([27,30,31,44,45,76,92,102,103,],[-25,-28,-29,-26,-27,86,-35,-36,-37,]),'ASSIGN':([32,54,],[46,71,]),'STRING':([35,46,47,48,65,66,67,68,69,70,71,88,89,90,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'NUMBER':([35,46,47,48,65,66,67,68,69,70,71,88,89,90,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'CHAR':([35,46,47,48,65,66,67,68,69,70,71,88,89,90,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'INTEGERTYPE':([39,85,],[56,56,]),'BOOLEANTYPE':([39,85,],[57,57,]),'STRINGTYPE':([39,85,],[58,58,]),'THEN':([49,50,51,52,53,77,78,79,80,81,87,],[64,-43,-44,-45,-46,-38,-39,-40,-41,-42,-47,]),'PLUS':([49,50,51,52,53,61,62,63,77,78,79,80,81,83,84,87,93,94,95,],[65,-43,-44,-45,-46,65,65,65,65,65,65,65,65,65,65,-47,65,65,65,]),'MINUS':([49,50,51,52,53,61,62,63,77,78,79,80,81,83,84,87,93,94,95,],[66,-43,-44,-45,-46,66,66,66,66,66,66,66,66,66,66,-47,66,66,66,]),'TIMES':([49,50,51,52,53,61,62,63,77,78,79,80,81,83,84,87,93,94,95,],[67,-43,-44,-45,-46,67,67,67,67,67,67,67,67,67,67,-47,67,67,67,]),'DIVIDE':([49,50,51,52,53,61,62,63,77,78,79,80,81,83,84,87,93,94,95,],[68,-43,-44,-45,-46,68,68,68,68,68,68,68,68,68,68,-47,68,68,68,]),'GT':([49,50,51,52,53,61,62,63,77,78,79,80,81,83,84,87,93,94,95,],[69,-43,-44,-45,-46,69,69,69,69,69,69,69,69,69,69,-47,69,69,69,]),'TO':([50,51,52,53,77,78,79,80,81,84,87,],[-43,-44,-45,-46,-38,-39,-40,-41,-42,89,-47,]),'DOWNTO':([50,51,52,53,77,78,79,80,81,84,87,],[-43,-44,-45,-46,-38,-39,-40,-41,-42,90,-47,]),'DO':([50,51,52,53,77,78,79,80,81,87,94,95,],[-43,-44,-45,-46,-38,-39,-40,-41,-42,-47,97,98,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'program_name':([2,],[3,]),'program_body':([5,],[6,]),'func_decls':([5,],[7,]),'var_decl':([5,7,96,],[8,15,100,]),'begin_progr':([5,7,8,15,],[9,16,18,37,]),'func_decl':([5,7,],[10,17,]),'compound_statement':([5,7,8,14,15,25,64,86,96,97,98,100,],[12,12,12,29,12,29,29,29,101,29,29,104,]),'var_decl_lines':([11,41,],[19,60,]),'var_decl_line':([11,19,41,60,],[20,38,20,38,]),'id_list':([11,19,41,60,],[21,21,21,21,]),'statement_list':([14,],[25,]),'statement':([14,25,64,86,97,98,],[26,43,76,92,102,103,]),'simple_statement':([14,25,64,86,97,98,],[28,28,28,28,28,28,]),'selection_statement':([14,25,64,86,97,98,],[30,30,30,30,30,30,]),'for_statement':([14,25,64,86,97,98,],[31,31,31,31,31,31,]),'expression':([35,46,47,48,65,66,67,68,69,70,71,88,89,90,],[49,61,62,63,77,78,79,80,81,83,84,93,94,95,]),'type':([39,85,],[55,91,]),'expression_list':([70,],[82,]),'begin_func':([96,],[99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> PROGRAM program_name','init',2,'p_init','parser.py',65),
  ('program_name -> ID SEMICOLON program_body','program_name',3,'p_program_name','parser.py',69),
  ('program_body -> func_decls var_decl begin_progr','program_body',3,'p_program_body','parser.py',73),
  ('program_body -> func_decls begin_progr','program_body',2,'p_program_body','parser.py',74),
  ('program_body -> var_decl begin_progr','program_body',2,'p_program_body','parser.py',75),
  ('program_body -> begin_progr','program_body',1,'p_program_body','parser.py',76),
  ('func_decls -> func_decl','func_decls',1,'p_func_decls','parser.py',87),
  ('func_decls -> func_decls func_decl','func_decls',2,'p_func_decls','parser.py',88),
  ('func_decl -> FUNCTION ID LPAREN var_decl_lines RPAREN COLON type SEMICOLON begin_func','func_decl',9,'p_func_decl','parser.py',95),
  ('begin_func -> var_decl compound_statement SEMICOLON','begin_func',3,'p_begin_funct','parser.py',104),
  ('begin_func -> compound_statement SEMICOLON','begin_func',2,'p_begin_funct','parser.py',105),
  ('var_decl -> VAR var_decl_lines','var_decl',2,'p_var_decl','parser.py',112),
  ('var_decl_lines -> var_decl_line','var_decl_lines',1,'p_var_decl_lines','parser.py',116),
  ('var_decl_lines -> var_decl_lines var_decl_line','var_decl_lines',2,'p_var_decl_lines','parser.py',117),
  ('var_decl_line -> id_list COLON type SEMICOLON','var_decl_line',4,'p_var_decl_line','parser.py',124),
  ('var_decl_line -> id_list COLON type','var_decl_line',3,'p_var_decl_line','parser.py',125),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',130),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',131),
  ('type -> INTEGERTYPE','type',1,'p_type','parser.py',138),
  ('type -> BOOLEANTYPE','type',1,'p_type','parser.py',139),
  ('type -> STRINGTYPE','type',1,'p_type','parser.py',140),
  ('begin_progr -> compound_statement DOT','begin_progr',2,'p_begin_progr','parser.py',144),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',148),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',149),
  ('statement -> COMMENT','statement',1,'p_statement','parser.py',156),
  ('statement -> simple_statement SEMICOLON','statement',2,'p_statement','parser.py',157),
  ('statement -> compound_statement SEMICOLON','statement',2,'p_statement','parser.py',158),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',159),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',160),
  ('simple_statement -> ID ASSIGN expression','simple_statement',3,'p_simple_statement','parser.py',167),
  ('simple_statement -> WRITEFUNC LPAREN expression RPAREN','simple_statement',4,'p_simple_statement','parser.py',168),
  ('simple_statement -> WRITEFUNCLN LPAREN expression RPAREN','simple_statement',4,'p_simple_statement','parser.py',169),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','parser.py',178),
  ('selection_statement -> IF expression THEN statement','selection_statement',4,'p_selection_statement','parser.py',182),
  ('selection_statement -> IF expression THEN statement ELSE statement','selection_statement',6,'p_selection_statement','parser.py',183),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','parser.py',197),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','parser.py',198),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',209),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',210),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',211),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',212),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',213),
  ('expression -> STRING','expression',1,'p_expression_value','parser.py',217),
  ('expression -> NUMBER','expression',1,'p_expression_value','parser.py',218),
  ('expression -> CHAR','expression',1,'p_expression_value','parser.py',219),
  ('expression -> ID','expression',1,'p_expression_value','parser.py',220),
  ('expression -> ID LPAREN expression_list RPAREN','expression',4,'p_expression_function_call','parser.py',223),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',230),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',231),
]
